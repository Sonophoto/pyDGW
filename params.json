{
  "name": "pyDGW",
  "tagline": "A set of classes that implements a machine for creating and walking Directed Graphs",
  "body": "This is a simple tool for creating directed graphs and walking through them. This is my first python project so your mileage may vary. It does work and you can use the examples to get started.\r\n\r\nA directed graph is the mathematical entity behind the commonly known \"state machine\". Setting conditions and actions at each node, defining a start node and one or more end nodes, and then walking through those nodes according to the conditions and actions in the nodes is the behaviour of a \"state machine\" This library is meant to simplify the process of creating and testing these types of Directed Graphs.\r\n\r\npyDGW works by maintaining a dictionary of nodes in a graph keyed by a string name and a value that is the reference of a callback function that defines the possible transitions from one node to the next. pyDGW implements DGW_data which is a \"pass object\" (like a void pointer in C) which is then populated with members by the user to track the state of their graph walk. The DGWalker engine (object) then passes this object between nodes. pyDGW implements methods for adding nodes, setting nodes to be a starting node or ending nodes, and then walking thru the nodes by calling the callback function of each node it enters beginning with the start node until it reaches an end node. The callback for the endNode is executed before exit and allows printing out the contents of the DGW_data object or other actions.\r\n\r\nIncludes two simple examples to demonstrate usage of the library and help you get started walking Directed Graphs.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}